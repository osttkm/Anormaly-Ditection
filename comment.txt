2/15
稲垣先輩から頂いたプログラムファイルを少しいじった。
論文の内容理解をもとにまずはプログラムの解析を進めるとともに、先輩とは用いるデータセットが異なるためデータローダーとかデータセット周りの設定について調べて変更すること。
三日くらいの感覚で先輩に報告をすること。

2/16
***自作のデータセットに関して***
データが読み取れていない場合はだいたい
パスが間違っている or ファイル構造がコードに適していない
のどちらかであるため要注意。

***killedについて***
これが出たらメインメモリが不足している証拠。容量の大きいパソコンに環境を作ること
環境について、dockerfileとかymlfileに変更を加えた場合はgit pull origin masterで新しくしたfileを更新
該当puにroot userで入ってsudo docker-conpose up -d --buildで更新すれば環境を更新できる

***GPU35について***
gpu35のルート権限は持っていないため自分のdocker set upfileの中にあるexec.shをbashで起動。
めんどくさいけどルートユーザでいろいろインストールすること。


2/21
一通り出力が正しくでた。しかし、大きな傷しか見つけられていない様子。細かな傷を検知するためにいろいろ試行錯誤を行ってみる。
・EfficientNetで実行をしてみる。gitの例を参考にしてB7からやってみる。
・用いるレイヤーに関しても試行錯誤をしてみること。

2/28
resnet系列は全体的にエラーの検出自体は比較的いい精度でできているものの、過検出が多く見られる。
wide_resnet50において第４層まで用いるとかなり解像度が低下し、おおよその異常箇所の特定はできていると思われる。
また、今回用いたネットワークにおいて学習する正規分布の割合について、エッジや線などに反応しやすいであろう比較的浅い層の割合を大きくしてみた。
とてつもなく若干、線を見つけられるようになったものもあれば逆に過検出してしますものもあり、根本的な解決には至ってないと思われる。
wide_resnet50_2が最も性能が良く、時点でEffnet7、次がEffnet5だった。
wide_resnetの結果から、恐らくある程度解像度を落とし傷以外のところの精度を落とすことが重要だと思われる。
Eff7で11-18-38-51層目を使ったデータが今のところ最高精度

3/10 
出力画像の見た目をもとに実験していたが、異常度の正規化はモデルによって異なる。すべてのモデルにおいて一定の評価指標にしなければいけない
画像２０番目くらいの異常がとても強いもののスケーリング前の異常データをもとに決めること。またスライドのデータを書き換えておく。

未検出について何も言及していなかったためその内容に関する考察を追加するとともに、未検出画像の保存を行っておく
